# 워크플로우의 이름 지정
name: GO-SOPT-Server CD

# 해당 workflow가 언제 실행될 것인지에 대한 트리거를 지정
on:
  push:
    branches: [ main ] # main branch로 push 될 때 실행됩니다. (pull request까지 정상적으로 실행되었을 때 배포되도록 하기 위해 push에 대해서만 지정)

env:
  S3_BUCKET_NAME: sopt32-seminar

jobs:
  build:
    name: Code deployment

    # 실행 환경
    runs-on: ubuntu-latest

    steps:
    
    # 1) 워크플로우 실행 전 기본적으로 체크아웃 필요
    - name: checkout
      uses: actions/checkout@v3
    
    # 2) JDK 11버전 설치, 다른 JDK 버전을 사용하다면 수정
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    # 3) 환경변수 파일 생성
    - name: make application.yml 파일 생성
      run: |
        ## create application.yml
        mkdir ./WEEK4/FourthSeminar/src/main/resources
        cd ./WEEK4/FourthSeminar/src/main/resources

        # application.yml 파일 생성 (touch: 빈 파일 생성하는 리눅스 명령어)
        touch ./application.yml

        # GitHub-Actions 에서 설정한 값을 application.yml 파일에 쓰기
        echo "${{ secrets.SOPT_APPLICATION }}" >> ./application.yml
        
        # application.yml 파일 확인
        cat ./application.yml
      shell: bash
        
    # 이 워크플로우는 gradle build
    - name: Grant execute permission for gradlew
      run: |
        cd ./WEEK4/FourthSeminar
        chmod +x gradlew
      
    - name: Build with Gradle # 실제 application build(-x 옵션을 통해 test는 제외)
      run: |
        cd ./WEEK4/FourthSeminar
        ./gradlew build -x test
      
    ## GitHub에서 제공하는 환경에 맞게 구성
    # 디렉토리 생성
    - name: Make Directory
      run: mkdir -p deploy
      
    # Jar 파일 복사
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy
    
    # appspec.yml 파일 복사
    - name: Copy appspec.yml
      run: cp appspec.yml ./deploy

    # script files 복사 (EC2 서버에 미리 올려두고 실행만 하도록 설정하는 방식도 있음)
    - name: Copy script
      run: cp ./scripts/*.sh ./deploy
      
    - name: Make zip file (압축 파일 생성)
      run: zip -r ./sopt_server.zip ./deploy
      shell: bash
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ap-northeast-2
        
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./sopt_server.zip s3://$S3_BUCKET_NAME/
      
    # Deploy (AWS Credential을 가져와 권한을 인증한 후에 ec2 인스턴스에 zip파일 업로드하여 배포!)
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run:
        aws deploy create-deployment 
        --application-name sopt-server-codedeploy
        --deployment-group-name sopt-server-codedeploy-group
        --file-exists-behavior OVERWRITE 
        --s3-location bucket=sopt32-seminar,bundleType=zip,key=sopt_server.zip
        --region ap-northeast-2
